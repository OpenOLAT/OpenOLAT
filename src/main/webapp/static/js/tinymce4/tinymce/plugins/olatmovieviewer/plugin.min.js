/**
 * OLAT custom smileys plugin that uses css classes rather than hardcoded image
 * urls to support the OLAT theaming mechanism.
 * Most of the code is based on the standard smileys plugin that comes bundled
 * with TinyMCE
 * 
 * 18.06.2009 timo.wuersch@frentix.com 
 */
(function() {
    'use strict'; 
    
    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');
    var backgroundStyle = " border: 1px dotted #cc0000; background-color: #ffffcc; background-repeat: no-repeat; background-position: 50% 50%; background-size: cover;";
	
    var cachedTrans;
	var cachedCoreTrans;
	
	// Load the OLAT translator.
	function translator() {	
		if(cachedTrans) {
			return cachedTrans;
		}
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core.gui.components.form.flexible.impl.elements.richText.plugins.olatmovieviewer');
		} else {
			cachedTrans = {	translate : function(key) { return key; } }
		}
		return cachedTrans;
	}
	
	function coreTranslator() {	
		if(cachedCoreTrans) return cachedCoreTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedCoreTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core');
		} else {
			cachedCoreTrans = {	translate : function(key) { return key; } }
		}
		return cachedCoreTrans;
	}
	
	function getNextDomId(editor) {
		var count = 0;
		var domId;
		var placeHolders = editor.dom.select("img.mceItemOlatMovieViewer");
		do {
			domId = "olatFlashMovieViewer" + (~~(Math.random() * 1000000));
			if(count > 20) {
				break;
			}
		} while(domIdInUse(domId, placeHolders));
		return domId;
	}
	
	function domIdInUse(domId, placeHolders) {
		for(var i=0; i<placeHolders.length; i++) {
			if(placeHolders[i].title != undefined && placeHolders[i].title.indexOf(domId) > 0) {
				return true;
			}
		}
		return false;
	}
	
	function buildProviderList() {
		var targetListItems = [
		    {text: translator().translate('olatmovieviewer.video'), value: 'video'},
		    {text: translator().translate('olatmovieviewer.sound'), value: 'sound'},
		    {text: translator().translate('olatmovieviewer.youtube'), value: 'youtube'},
		    {text: translator().translate('olatmovieviewer.vimeo'), value: 'vimeo'},
		    {text: translator().translate('olatmovieviewer.nanoo'), value: 'nanoo'},
		    {text: translator().translate('olatmovieviewer.http'), value: 'http'},
		    {text: translator().translate('olatmovieviewer.rtmp'), value: 'rtmp'}
		];
		return targetListItems;
	}
	
	function previewIframe(editor) {
		// add scripts to iframe
		var iframe = document.getElementById("movie-preview");
		var iframeWindow = iframe.contentWindow || iframe.contentDocument.document || iframe.contentDocument;
		var iframeDocument = iframeWindow.document;
		var iframeHead = iframeDocument.getElementsByTagName('head')[0];
		var iframeBody = iframeDocument.getElementsByTagName('body')[0];
		iframeBody.innerHTML = '<div id="prev" name="prev"><div id="prev_container" name="prev_container"></div></div>';
		iframeBody.style.margin = '0';
		
		var contextPath = editor.getParam("contextPath");
		var node = iframeWindow.document.createElement('script');
		node.src = contextPath + '/raw/_noversion_/movie/player.js';
		node.type = 'text/javascript';
		node.async = true;
		node.charset = 'utf-8';
		iframeHead.appendChild(node);
		
		node = iframeWindow.document.createElement('script');
		node.src = contextPath + '/raw/_noversion_/movie/mediaelementjs/mediaelement-and-player.min.js';
		node.type = 'text/javascript';
		node.async = true;
		node.charset = 'utf-8';
		iframeHead.appendChild(node);
		
		node = iframeWindow.document.createElement('script');
		node.src = contextPath + '/raw/_noversion_/js/jquery/jquery-3.6.0.min.js';
		node.type = 'text/javascript';
		node.async = true;
		node.charset = 'utf-8';
		iframeHead.appendChild(node);
		
		node = iframeWindow.document.createElement('link');
		node.href = contextPath + '/raw/_noversion_/movie/mediaelementjs/mediaelementplayer.min.css';
		iframeHead.appendChild(node);
		
		return iframeDocument;
	}
	
	function parseBPlayerScript(editor,script) {
		if(script == null || script == undefined) return '';
		
		var startMark = 'BPlayer.insertPlayer(';
		var start = script.indexOf(startMark);
		var end = script.indexOf(');');
		if(start < 0 || end < 0) return '';
		var params = script.substring(start + startMark.length,end);
		return parseBPlayerScriptParameters(editor,params);
	}
	
	function parseValue(text) {
		if(text) {
			if("undefined" === text) {
				text = "";
			} else if("false" === text) {
				text = false;
			} else if("true" === text) {
				text = true;
			} else {
				text = text.replace('"', '').replace('"', '').trim();
			}
		}
		return text;
	}

	function parseBPlayerScriptParameters(editor, scriptParameters) {
		var settingsArr = scriptParameters.split(',');
		for(var i=settingsArr.length; i-->0; ) {
			settingsArr[i] = parseValue(settingsArr[i]);
		}
		return {
			 "domIdentity" : settingsArr[1],
			 "address": { "value": settingsArr[0] },
			 "poster": { "value": settingsArr[11] },
			 "streamer":  settingsArr[7],
			 "starttime": settingsArr[4],
			 "autostart": settingsArr[8],
			 "repeat": settingsArr[9],
			 "controlbar": true,
			 "provider": settingsArr[6],
			 "width": "" + settingsArr[2],
			 "height": "" + settingsArr[3]
		};
	}
			
	//The video player code.
	function getPlayerHtmlNode(editor, p) {
		// player configuration
		var playerWidth = typeof(p.width) != "undefined" ? parseInt(p.width)  : '';
		var playerHeight = typeof(p.height) != "undefined" ? parseInt(p.height) : '';
		var starttime = typeof(p.starttime) != "undefined" ? '"' + p.starttime + '"' : 0;
		var autostart = typeof(p.autostart) != "undefined" ? p.autostart : 'false';
		var repeat = typeof(p.repeat) != "undefined" ? p.repeat : 'false';
		var controlbar = 'true';
		var provider = typeof(p.provider) != "undefined" ? '"' + p.provider + '"' : 'undefined';
		var streamer = typeof(p.streamer) != "undefined" ? '"' + p.streamer + '"' : 'undefined';
		var domIdentity = typeof(p.domIdentity) != "undefined" ? p.domIdentity : getNextDomId(editor);
		var poster = typeof(p.poster) != "undefined" ? '"' + p.poster.value + '"' : 'undefined';
		var playerScriptUrl = editor.getParam("olatmovieviewer_playerScript");

		var h = '<script src="' + playerScriptUrl + '"></script>';
		h += '<script defer="defer">';
		h += 'BPlayer.insertPlayer("' + p.address.value + '","' + domIdentity + '",' + playerWidth + ',' + playerHeight + ',' + starttime + ',0,' + provider + ',' + streamer +',' + autostart + ',' + repeat + ',' + controlbar + ',' + poster + ');';
		h += '</script>';
		var node = editor.dom.create("span", {
			id:domIdentity,
			name:domIdentity,
			"class":"olatFlashMovieViewer",
			"style":'display:block; border:solid 1px #000; width:' + playerWidth + 'px; height:' + playerHeight + 'px;'
		},h);
		return node;
	}
	
	function isMovieElement(element) {
		return element.hasAttribute('data-oo-movie-parameters');
	}
	
	var setup = function(editor, url) {
		/** 
         * This onPreProcess handler is used to convert the placeholder &lt;img&gt; tags to the
         * &lt;embed&gt; etc. tags when saving the document.
         */
		editor.on('PreProcess',function(e, format) {
			jQuery('img.mceItemOlatMovieViewer', e.node).each(function (idx, elm) {
				var data = JSON.parse(elm.getAttribute("data-oo-movie-parameters"));
				if(data) {
					//
				} else {
					data = {};
				}
				var playerNode = getPlayerHtmlNode(editor, data);
				editor.dom.replace(playerNode, elm, true);
			});
		});
		
		/** 
         * This onSetContent handler is used to convert the comments to placeholder images (e.g. when loading).
         */
		editor.on('SetContent', function(e) {
			// Get the URL of the transparent placeholder image
			var imgUrl = editor.getParam("olatmovieviewer_transparentImage");
			tinymce.each(editor.dom.select("div.olatFlashMovieViewer,span.olatFlashMovieViewer,object.olatFlashMovieViewer"), function(node) {
				// ...and for each of these, create an IMG...
				var movieSettings
				var dataMovie = editor.dom.getAttrib(node, 'data-oo-movie');
				if(dataMovie == "" || typeof dataMovie == "undefined") {
					movieSettings = parseBPlayerScript(editor, node.innerHTML);
				} else {
					dataMovie = dataMovie.replace(new RegExp("'", 'g'), '"');
					movieSettings = parseBPlayerScriptParameters(editor, dataMovie);
				}

				var width = typeof(movieSettings.width) == 'undefined' ? 320 : movieSettings.width;
				var height = typeof(movieSettings.height) == 'undefined' ? 240 : movieSettings.height;
				
				var style = 'width:' + width + 'px; height:' + height + 'px;';
				if( typeof movieSettings.poster.value !== undefined
						&& movieSettings.poster.value != null
						&& movieSettings.poster.value != "") {
					var posterUrl = editor.documentBaseURI.toAbsolute(movieSettings.poster.value);
					style += backgroundStyle + " background-image: url(" + posterUrl + ");";
				}

				var imgNode = editor.dom.create("img", {
					id: movieSettings.domIdentity,
					name: movieSettings.domIdentity,
					"class": "mceItemOlatMovieViewer",
					"style": style,
					src: imgUrl,
					"data-mce-placeholder": '1',
					"data-oo-movie-parameters": JSON.stringify(movieSettings)
				});

				// replace the div by the new img.
				editor.dom.replace(imgNode, node, false);
	            editor.dom.setAttrib(imgNode, style);
		    });
		});
		
		// Load Content CSS upon initialization
		editor.on('init', function() {
			if (editor.settings.content_css !== false) {
				editor.dom.loadCSS(url + "/css/content.css");
			}
		});
	};
	
	var register = function (editor, url) {
		var onAction = function() {
		
			//fill the data
			var data = {};
			var iframeDocument;
			var fe = editor.selection.getNode();
			if (/mceItemOlatMovieViewer/.test(editor.dom.getAttrib(fe, "class"))) {
				var settings = editor.dom.getAttrib(fe, "data-oo-movie-parameters");
				data = JSON.parse(settings);
			} else {
				fe = editor.dom.select("img.mceItemOlatMovieViewer", fe);
				if (fe.length == 1 && /mceItemOlatMovieViewer/.test(editor.dom.getAttrib(fe[0], "class"))) {
					data = JSON.parse(editor.dom.getAttrib(fe[0], "data-oo-movie-parameters"));
				}
			}

			var onSubmit = function (dialog) {
				var data = dialog.getData();
				data.width = data.width == "" ? 100 : data.width;
				data.height = data.height == "" ? 100 : data.height;
				var serializedData = JSON.stringify(data);
				
				var fe = editor.selection.getNode();
				if (fe != null && fe != "undefined" && /mceItemOlatMovieViewer/.test(editor.dom.getAttrib(fe, 'class'))) {
					// change values from existing object
					fe.setAttribute("data-oo-movie-parameters", serializedData);
					fe.style.width = data.width + (data.width.indexOf('%') == -1 ? 'px' : '');
					fe.style.height = data.height + (data.height.indexOf('%') == -1 ? 'px' : '');
					fe.style.backgroundColor = "#ffffcc";
					if(data.poster.value != null && data.poster.value != "") {
						var posterUrl = editor.documentBaseURI.toAbsolute(data.poster.value);
						fe.style.backgroundImage = "url('" + posterUrl + "')";
						fe.style.backgroundPosition = "50% 50%";
						fe.style.backgroundSize = "cover";
					} else {
						fe.style.backgroundImage = "url('" + url + "/css/olatmovieviewer.png')";
						fe.style.backgroundPosition = "center";
						fe.style.backgroundSize = "32px 32px";
					}
					editor.execCommand("mceRepaint");
				} else {
					// add new object
					var newDomId = getNextDomId(editor);
					var h = "<img id='" + newDomId + "'";
					h += " class='mceItemOlatMovieViewer' src='" + editor.getParam("olatmovieviewer_transparentImage") + "'";
					h += " data-oo-movie-parameters='" + serializedData + "' data-mce-placeholder='1'";
					h += " width='" + data.width + "' height='" + data.height + "'"
					h += " style='width:" + data.width + "px; height:" + data.height + "px;";
					if(data.poster.value != null && data.poster.value != "") {
						var posterUrl = editor.documentBaseURI.toAbsolute(data.poster.value);
						h += backgroundStyle + " background-image: url(" + posterUrl + ");";
					}
					h += "' />";
					editor.execCommand("mceInsertContent", false, h);
				}
				dialog.close();
				return true;
			};
			
			var onChange = function (dialogApi, details) {
				try {
					var data = dialogApi.getData();
					if(details.name === "address") {
						if(typeof data.address.meta.width !== "undefined") {
							data.width = "" + data.address.meta.width;
							data.height = "" + data.address.meta.height;
							dialogApi.setData(data);
						}
						if(data.provider === "nanoo") {
							generateSizes(editor, dialogApi, data);
						}
						generatePreview(editor, data);
					} else if(details.name === "provider") {
						dialogApi.redial(dialogConfig(data));
						dialogApi.setData(data);
						if(data.provider === "nanoo") {
							generateSizes(editor, dialogApi, data);
						}
						iframeDocument = previewIframe(editor);
						setTimeout(function() {
							generatePreview(editor, data);
						}, 1000); 
					}
				} catch(e) {
					console.log(e);
				}
			};
			
			function dialogConfig(data) {
				var provider = { name: 'provider', type: 'listbox',
					label: translator().translate('olatmovieviewer.provider'),
					items: buildProviderList()
				};
				
				var address;
				if(data.provider == 'rtmp' || data.provider == 'http') {
					address = { name: 'streamer', type: 'input', label: translator().translate('olatmovieviewer.streamer') };
				} else {
				 	address = { name: 'address', type: 'urlinput', filetype: 'media', label: translator().translate('olatmovieviewer.address') };
				}
			
				var poster = { name: 'poster', type: 'urlinput', filetype: 'image', label: translator().translate('olatmovieviewer.poster') };
		    	var sizes = {
					type: 'label',
							name: 'sizes',
							label: translator().translate('olatmovieviewer.size'),
							items: [{
								type: 'bar',
								name: 'sizes',
								label: translator().translate('olatmovieviewer.size'),
								spacing: 5,
								items: [
									{ name: 'width', type: 'input', maxLength: 4, size: 4 },
									{ name: 'separator', label: 'x', type: 'label', items: [] },
									{ name: 'height', type: 'input', maxLength: 4, size: 4 }
								]
							}]
			    	    };
			    	    
				var preview = { 
			    	    	name: 'preview',
			    	    	type: 'htmlpanel',
			    	    	label: 'Preview',
							html:'<iframe id="movie-preview" style="width: 100%; min-height: 320px;"></iframe>'
					    };
	
				var generalTab = {
					title: 'General',
					name: 'general',
					items: [ provider, address, poster, sizes, preview ]
				}; 
				
				var advancedTab = {
					title: 'Advanced',
					name: 'advanced',
					items: [
			    	    { name: 'starttime', type: 'input', checked: true, label: translator().translate('olatmovieviewer.starttime')},
			    	    { name: 'autostart', type: 'checkbox', checked: false, label: translator().translate('olatmovieviewer.autostart'), text:''},
			    	    { name: 'repeat', type: 'checkbox', checked: false, label: translator().translate('olatmovieviewer.repeat'), text:''}
			    	]
				};

				var body = {
					type: 'tabpanel',
					tabs: [
						generalTab,
						advancedTab
					]
				};
			
				return {
					title: 'Movies',
	        		size: 'medium',
					body: body,
					initialData: data,
					buttons: [
						{
							type: 'cancel',
							name: 'cancel',
							text: 'Cancel'
						},
						{
							type: 'submit',
							name: 'save',
							text: 'Save',
							primary: true
						}
			        ],
					onChange: onChange,
					onSubmit: onSubmit
				}
			}
			
			var config = dialogConfig(data);
			var win = editor.windowManager.open(config);
			iframeDocument = previewIframe(editor);
			
			function generatePreview(editor, p) {
				// player configuration
				var playerWidth = typeof(p.width) != "undefined" ? parseInt(p.width)  : '320';
				var playerHeight = typeof(p.height) != "undefined" ? parseInt(p.height) : '240';
				var start = typeof(p.starttime) != "undefined" ? p.starttime : "00:00:00.000";
				var autostart = typeof(p.autostart) != "undefined" ? p.autostart : false;
				var repeat = typeof(p.repeat) != "undefined" ? p.repeat : false;
				var controlbar = typeof(p.controlbar) != "undefined" ? p.controlbar : true;
				var provider = typeof(p.provider) != "undefined" ? p.provider : undefined;
				var streamer = typeof(p.streamer) != "undefined" ? p.streamer : undefined;
				
				//scale the video if to big to not overlap the buttons
				var maxHeight = 320;
				var maxWidth = 640;
				if(playerHeight > maxHeight || playerWidth > maxWidth) {
					var thumbRatio = maxWidth / maxHeight;
				    var imageRatio = playerWidth / playerHeight;
				    if (thumbRatio < imageRatio) {
				    	playerHeight = (maxWidth / imageRatio);
				    	playerWidth = maxWidth;
				    }  else {
				    	playerWidth = (maxHeight * imageRatio);
				    	playerHeight = maxHeight;
				    }
				}
				
				var videoUrl = null;
				if(typeof p.address !== "undefined" && typeof p.address.value !== "undefined") {
					var address = p.address.value;
					if(address.indexOf('://') < 0 && ((provider != "rtmp" && provider != "http") ||
						((provider == "rtmp" || provider == "http") && (streamer == undefined || streamer.length == 0)))) {
						videoUrl = editor.documentBaseURI.toAbsolute(address);
					} else {
						videoUrl = address;
					}
				}
				
				
				if(videoUrl != null) {
					jQuery('#prev_container').width(playerWidth + 'px').height(playerHeight + 'px');
					
					var iframeBody = iframeDocument.getElementsByTagName('body')[0];
					var div = iframeBody.querySelector('div#prev');
					if (!div) {
						div = iframeDocument.createElement('div');
						div.setAttribute("prev");
						iframeBody.appendChild(div);
					}
					
					var preview = '<div id="prev_2_container" name="prev_container" style="height:' + playerHeight + 'px; width:' + playerWidth + 'px"></div>';
					preview += "<script>";
					preview += "BPlayer.insertPlayer('" + videoUrl + "','prev_2_container'," + playerWidth + "," + playerHeight + ",'" + start + "',0,'" + provider + "','" + streamer + "'," + autostart + "," + repeat + "," + controlbar + ");";
					preview += "</script>";
					
					jQuery(div).empty().html(preview);
				}
			}
			
			/**
			 * Get server side to find some sizes
			 */
			function generateSizes(editor, dialogApi, data) {
				var address = data.address.value;
				if(address != null && address !== undefined && address.indexOf('nanoo.tv') > 0) {
					var parts = address.split('?');
					var nanooId = parts[0].substring(address.lastIndexOf('/') + 1);
					var width = data.width;
					var height = data.height;
					if((nanooId.length > 6) && (width == null || width === undefined || width === "") && (height == null || height === undefined || height === "")) {
						var contextPath = editor.getParam("contextPath");
						var url = contextPath + "/tiny/nanoo?nanooId=" + nanooId;
						jQuery.getJSON(url, function(responseData) {
							if(responseData.width > 0 || responseData.height > 0) {
								data.width = "" + responseData.width;
								data.height = "" + responseData.height;
								dialogApi.setData(data);
								generatePreview(editor, data);
							}
						});
					}
				}
			}
			
			setTimeout(function() {
				generatePreview(editor, data);
			}, 500);
		}
		
		editor.ui.registry.addToggleButton('olatmovieviewer', {
			icon : 'oo-video',
			tooltip: 'Movie',
			onAction: onAction,
			onSetup: function (buttonApi) {
				var selection = editor.selection;
				buttonApi.setActive(isMovieElement(selection.getNode()));
				return selection.selectorChangedWithUnbind('img[data-oo-movie-parameters]', buttonApi.setActive).unbind;
			}
		});
		
		editor.ui.registry.addMenuItem('olatmovieviewer', {
			text: 'Movie',
			icon : 'oo-video',
			context: 'insert',
			onAction: onAction
		});
	};          
	
	function Plugin () {
		global$2.add('olatmovieviewer', function (editor, url) {
			setup(editor, url);
			register(editor, url);
			
			return {
				getMetadata: function () {
					return {
						name : 'OpenOLATMovieViewer',
						author : 'frentix GmbH',
						authorurl : 'https://www.frentix.com',
						url : 'https://www.frentix.com',
						version : '3.0.0'
			     	};
			     }
			}
		});
    }

    Plugin();
})();
