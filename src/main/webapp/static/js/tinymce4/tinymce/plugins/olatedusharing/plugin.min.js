(function() {
    'use strict'; 
    
    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');
    
    var cachedTrans, cachedCoreTrans;
	var cachedHelp;
	
	// Load the OLAT translator.
	function translator() {	
		if(cachedTrans) return cachedTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.modules.edusharing.ui');
		} else {
			cachedTrans = {	translate : function(key) { return key; } }
		}
		return cachedTrans;
	}
	function coreTranslator() {	
		if(cachedCoreTrans) return cachedCoreTrans;
		var mainWin = o_getMainWin();
		if (mainWin) {
			cachedCoreTrans = jQuery(document).ooTranslator().getTranslator(mainWin.o_info.locale, 'org.olat.core');
		} else {
			cachedCoreTrans = {	translate : function(key) { return key; } }
		}
		return cachedCoreTrans;
	}

	var register = function (editor, url) {

		function handles(node) {
			// only an <object>-node can possibly be edu-sharing-node
			if ( 1 != node.nodeType ) {
				return false;
			}
			// no identifier means no edu-sharing node
			if (!node.dataset.es_identifier) {
				return false;
			}
			return true;
		}
		
		function createIdentifier() {
			function s4() {
				return Math.floor((1 + Math.random()) * 0x10000)
					.toString(16)
					.substring(1);
			}
			return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
		}
		
		function getPreviewUrl(params) {
			var contextPath = editor.getParam("contextPath");
			var preview_url = contextPath + "/edusharing/preview",
			preview_url = preview_url.concat('?objectUrl=' + params.object_url);
			preview_url = preview_url.concat('&version=' + params.window_version);
			return preview_url;
		}
		
		function showPreview(params) {
			var mimeHelper = params != null && params.mimetype !== null? params.mimetype.substr(0, 6).toLowerCase(): null;
			if (params.mediatype == 'tool_object' || mimeHelper == 'audio/' || mimeHelper == 'video/' || mimeHelper == 'image/' || params.repotype == 'YOUTUBE') {
				return true;
			}
			return false;
		}
			
		function onResourceSelected(params) {
			// Selection returns nothing
			if (typeof params == 'undefined') {
				console.warn("edu-sharing selection returns nothing.");
				return;
			}
			 // window was closed without selection
			if (typeof params.mimetype == 'undefined') return;
			
			var selectedNode = editor.selection.getNode();
			
			var node;
			if (showPreview(params)) {
				node = document.createElement('img');
				node = selectedNode.appendChild(node);
				node.setAttribute('src', getPreviewUrl(params));
			} else {
				node = document.createElement('a');
				node = selectedNode.appendChild(node);
				node.innerHTML = params.title;
			}
			node.dataset.es_identifier = createIdentifier();
			node.dataset.es_objecturl = params.object_url;
			node.dataset.es_version = params.window_version;
			node.dataset.es_version_current = params.window_version;
			if (params.es_mimetype !== null) {
				node.dataset.es_mimetype = params.mimetype;
			}
			if (params.mediatype !== null) {
				node.dataset.es_mediatype = params.mediatype;
			}
			if (params.window_width !== null) {
				node.dataset.es_width = params.window_width;
			}
			if (params.window_height !== null) {
				node.dataset.es_height = params.window_height;
			}
			node.dataset.es_first_edit = true;
			node.dataset.es_show_license = 'show';
			node.dataset.es_show_infos = 'show';

			node.setAttribute('class', 'o_edusharing_left');
			setAttributes(node, params);
			
			editor.selection.setCursorLocation(node);
			editor.execCommand('edusharing_edit_dialog');
		}
			
		function onConfigEdited(dialogApi, details) {
			var params = dialogApi.getData();
			var node = editor.selection.getNode();
			setAttributes(node, params);
			
			if (params.window_versionshow == 'latest') {
				node.dataset.es_version = 0;
			} else {
				node.dataset.es_version = node.dataset.es_version_current;
			}
			node.dataset.es_show_license = params.esShowLicense;
			node.dataset.es_show_infos = params.esShowInfos;
			
			editor.execCommand('mceRepaint')
			dialogApi.close();
		}
		
		function dialogConfig(params, hideSize, versionDisabled) {
	    
		    var items = [{ 
					name: 'title',
					type: 'input',
					label: translator().translate('tiny.config.title'),
				}];
				
			if(versionDisabled) {
				items.push({ 
					name: 'window_versionshow',
					type: 'listbox',
					label: versionDisabled? null: translator().translate('tiny.config.version'), 
					items: [
						{text: translator().translate('tiny.config.version.latest'), value: 'latest'},
						{text: translator().translate('tiny.config.version.current'), value: 'current'}
					],
					value: params.window_versionshow,
					hidden: versionDisabled
				});
			}
			
			items.push({ 
					name: 'esShowLicense',
					type: 'listbox',
					label: translator().translate('tiny.config.license.label'), 
					items: [
						{text: translator().translate('tiny.config.license.show'), value: 'show'},
						{text: translator().translate('tiny.config.license.hide'), value: 'hide'}
					],
				},
				{ 
					name: 'esShowInfos',
					type: 'listbox',
					label: translator().translate('tiny.config.infos.label'), 
					items: [
						{text: translator().translate('tiny.config.infos.show'), value: 'show'},
						{text: translator().translate('tiny.config.infos.hide'), value: 'hide'}
					],
				},
				{ 
					name: 'esFloat',
					type: 'listbox',
					label: translator().translate('tiny.config.float'), 
					items : [
						{text: translator().translate('tiny.config.float.left'), value: 'o_edusharing_left'},
						{text: translator().translate('tiny.config.float.right'), value: 'o_edusharing_right'},
						{text: translator().translate('tiny.config.float.inline'), value: 'o_edusharing_inline'},
						{text: translator().translate('tiny.config.float.none'), value: 'o_edusharing_none'}
					],
				});
				
			if(!hideSize) {
				items.push({
					type: 'label',
					name: 'sizes',
					label: translator().translate('tiny.config.size'),
					items: [{
						type: 'bar',
						name: 'sizes',
						label: translator().translate('tiny.config.size'),
						spacing: 5,
						items: [
							{ name: 'window_width', type: 'input', maxLength: 4, size: 4 },
							{ name: 'separator', label: 'x', type: 'label', items: [] },
							{ name: 'window_height', type: 'input', maxLength: 4, size: 4 }
						]
					}]
	    	    });
			}

			return {
				title: translator().translate('tiny.config.dialog.title'),
				initialData: params,
				body: {
					type: 'panel',
					items: items
				},
				buttons: [
					{
						type: 'cancel',
						name: 'cancel',
						text: 'Cancel'
					},
					{
						type: 'submit',
						name: 'save',
						text: 'Save',
						primary: true
					}
		        ],
				onSubmit: onConfigEdited
			}
		}
		
		function setAttributes(node, params) {
			node.setAttribute('class', params.esFloat);
			node.setAttribute('data-mce-placeholder', '1');
			node.setAttribute('alt', params.title);
			node.setAttribute('title', params.title);
			var width = params.window_width;
			if (width == 0)
				width = '';
			node.setAttribute('width', width);
			var height = params.window_height;
			if (height == 0)
				height = '';
			node.setAttribute('height', height);
		}
			
		editor.ui.registry.addToggleButton('olatedusharing', {
			title : 'edu-sharing',
			icon : 'edusharing',
			onAction : function() {
				editor.execCommand('edusharing_button');
			},
			onSetup: function (buttonApi) {
				var selection = editor.selection;
				buttonApi.setActive(handles(selection.getNode()));
				return selection.selectorChangedWithUnbind('img.o_edusharing_left', buttonApi.setActive).unbind;
			}
		});

		editor.addCommand('edusharing_button', function(ui, value) {
			var node = editor.selection.getNode();
			if ( node ) {
				if ( handles(node) ) {
					editor.execCommand('edusharing_edit_dialog', ui, value);
				} else {
					editor.execCommand('edusharing_insert_dialog', ui, value);
				}
			}
		});
		
		editor.addCommand('edusharing_insert_dialog', function() {
			var dialog = {
				title: 'Edu-sharing',
				url: editor.getParam("contextPath") + "/edusharing/search",
				width:	document.documentElement.clientWidth * 0.8,
				height:	document.documentElement.clientHeight * 0.8,
				inline:	1,
				maximizable: true//,
				//onClose: onResourceSelected
			};

			editor.windowManager.openUrl(dialog);
		});
		
		window.addEventListener('message', function (event) {
			var data = event.data;
			if(data && data.mceAction === 'mceEdusharingContent') {
				editor.windowManager.close();
				onResourceSelected(data.params);
			}
		});

		editor.addCommand('edusharing_edit_dialog', function(ui, value) {
			var node = editor.selection.getNode();
			
			if (!handles(node)) {
				return false;
			}

			var params = {
				window_width : node.getAttribute('width'),
				window_height : node.getAttribute('height'),
				title : node.getAttribute('title'),
				esFloat: node.getAttribute('class'),
				esShowLicense: node.dataset.es_show_license,
				esShowInfos: node.dataset.es_show_infos,
				window_versionshow: node.dataset.es_version == 0? "latest": "current",
				mimetype: node.dataset.es_mimetype
			};
			
			var versionDisabled = node.dataset.es_first_edit === "true"? false: true;;
			node.dataset.es_first_edit = false;
			var hideSize = !showPreview(params);
			
			var config = dialogConfig(params, hideSize, versionDisabled);
			editor.windowManager.open(config);
		});
	};
	
	function Plugin () {
		global$2.add('olatedusharing', function (editor, url) {
			register(editor, url);
			
			return {
				getMetadata: function () {
					return {
						name : 'OpenOlat edu-sharing',
						author : 'uhensler, frentix GmbH',
						authorurl : 'https://www.frentix.com',
						infourl : 'https://www.frentix.com',
						version : "2.0.0"
			     	};
			     }
			}
		});
    }

    Plugin();
})();
